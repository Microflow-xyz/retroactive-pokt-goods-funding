// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String               @id @default(cuid())
    name          String?
    walletAddress String?              @unique
    email         String?              @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    discussions   Discussion[]
    reactions     DiscussionReaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Ballot {
    voterId String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    publishedAt DateTime?
    signature   String?

    votes Json[]

    @@unique([voterId]) // Only one ballot per voter
}

model Settings {
    id     String @id @default(cuid())
    poolId Int?
    config Json
}

enum DiscussionType {
    concern
    question
    strength
}

enum Reaction {
    thumbsUp
    thumbsDown
}

model Discussion {
    id          String               @id @default(uuid()) @db.Uuid
    content     String               @db.VarChar(1024)
    isAnonymous Boolean
    type        DiscussionType?
    thumbsUp    Int                  @default(0) @db.Integer
    thumbsDown  Int                  @default(0) @db.Integer
    projectId   String               @db.VarChar(128)
    userId      String               @db.VarChar(256)
    parentId    String?              @db.Uuid
    createdAt   DateTime             @default(now()) @db.Timestamptz()
    user        User                 @relation(fields: [userId], references: [id])
    parent      Discussion?          @relation("DiscussionReplies", fields: [parentId], references: [id])
    replies     Discussion[]         @relation("DiscussionReplies")
    reactions   DiscussionReaction[]
}

model DiscussionReaction {
    userId       String     @db.VarChar(256)
    discussionId String     @db.Uuid
    reaction     Reaction
    user         User       @relation(fields: [userId], references: [id])
    discussion   Discussion @relation(fields: [discussionId], references: [id])

    @@id([userId, discussionId])
}
